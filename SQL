SQL uses CRUD operations...create,read,update,delete
SQL comprises of DQL data query lang(select), DDL data def language(create,alter,rename,truncate,drop), DML data manipulation lang(insert,update,delete), 
DCL data control lang(grant,revoke), TCL transaction control language(start,rollback,commit)


CREATE DATABASE database_name;
CREATE DATABASE IF NOT EXISTS database_name;
DROP DATABASE database_name;
DROP DATABASE IF NOT EXISTS database_name;
USE database_name;
SHOW DATABASES;
SHOW TABLES;

CREATE TABLE table_name(col1 datatype const);
INSERT INTO table_name(col1,col2) VALUES(val1,val2);
DESCRIBE table_name;

SELECT * FROM table_name;

ALTER TABLE table_name ADD col_name datatype constraint;
ALTER TABLE table_name DROP col_name;

CREATE TABLE table_name(
id INT,
name  VARCHAR(50),
city VARCHAR(50),
PRIMARY KEY(id,name)
);

CREATE TABLE table_name(
id INT,
name  VARCHAR(50),
city VARCHAR(50),
PRIMARY KEY(id,name)
FOREIGN KEY(id) REFERENCES table_name2(corresponding_col_name)
);

CREATE TABLE table_name(
id INT UNIQUE AUTO_INCREMENT,
name  VARCHAR(50) NOT NULL,
city VARCHAR(50) DEFAULT 'Delhi',
PRIMARY KEY(id,name)
);


UPDATE table_name
SET city = 'Chandigarh'
WHERE city = 'Hyderabad';

UPDATE table_name
SET city = 'Chandigarh'
WHERE id = 4 OR city = 'Kolkata';

UPDATE table_name
SET city = 'Chandigarh',name = 'Rishin'
WHERE id = 3;
diff kinds of operrations we got =, <>(not equals), > , < < >=, <=


DELETE from table_name
WHERE id = 4;

INSERT INTO table_name VALUES(comma_seperated_values);
joh characters hai unko '' iske andar likhna hai

SELECT col1,col2 FROM table_name;
SELECT * FROM table_name;
SELECT TOP 5 * FROM table_name;

SELECT DISTINCT(col_name) FROM table_name;

SELECT * FROM emp 
WHERE loc LIKE 'c%'

SELECT * FROM emp 
WHERE loc NOT LIKE '_ _ _c'


CREATE TABLE city(
 id INT PRIMARY KEY,
 city VARCHAR(50),
 age INT,
 CONSTRAINT age_check CHECK (age >= 18 AND city = "Delhi")
);

CREATE TABLE newtab(
 age INT CHECK(age >= 18)
);

SELECT * FROM student 
WHERE marks BETWEEN 80 AND 90;

SELECT * FROM student 
WHERE city IN ("Delhi","Mumbai");

SELECT * FROM student 
WHERE city NOT IN ("Delhi","Mumbai");

-> limit clause sets an upper limit on the number of rows(tuples) to be returned
SELECT * FROM student 
LIMIT 3;

SELECT * FROM student 
ORDER BY city ASC;

-> if we want the data of top 3 students in class...so first by put it in decreasing order and then use limit clause to return the top 3 students
SELECT * FROM student 
ORDER BY marks DESC 
LIMIT 3;

-> aggregate functions ...count(),max(),min(),sum(),avg()

-> count no of students in each city
SELECT count(name),city
FROM student
GROUP BY city;

SELECT count(name),city,name
FROM student
GROUP BY city;
-> the above query is going to throw an error as name col is not specified in Group by clause

-> write the query to find avg marks in each city in asc order
SELECT city, AVG(marks) FROM student
GROUP BY city 
ORDER BY avg(marks) ASC;


SELECT mode, count(mode)
FROm table
GROUP BY mode;

SELECT count(name), city
FROM student
GROUP BY city
HAVING max(marks) > 90;

-> cascading means if there is a change in the child table then the change must be reflected in the parent table as well
CREATE TABLE table_name(
 id INT PRIMARY KEY,
 courseID INT,
 FOREIGN KEY (courseID) REFERENCES table_name2(id)
 ON DELETE CASCADE
 ON UPDATE CASCADE
);


ALTER TABLE table_name
ADD COLUMN column_name datatype constraints;

ALTER TABLE table_name
DROP COLUMN column_name;

-> table name change karne ke liye
ALTER TABLE table_name
RENAME TO new_table_name;

-> table mein koi col ka name change karne ke liye
ALTER TABLE table_name
CHANGE old_name new_name new_datatype new_constraints;

ALTER TABLE table_name
MODIFY column_name new_datatype new_constraint;

-> drop deletes the entire table but truncate deletes the data present in the table
TRUNCATE TABLE table_name;


-> joins
SELECT columns
FROM tableA
INNER JOIN tableB
ON tableA.col_name = tableB.col_name;

SELECT columns
FROM tableA
LEFT JOIN tableB
ON tableA.col_name = tableB.col_name;

SELECT columns
FROM tableA
RIGHT JOIN tableB
ON tableA.col_name = tableB.col_name;

-> saare table ko poori tarah join karne ke 2 methods
SELECT * FROM student AS a
LEFT JOIN course AS b
ON a.id = b.id
UNION
SELECT * FROM student AS a
RIGHT JOIN course AS b
ON a.id = b.id;

SELECT * FROM a
FULL OUTER JOIN b
ON a.key = b.key;


-> left exclusive join
SELECT * FROM student AS a
LEFT JOIN course AS B
ON a.id = b.id
WHERE b.id IS NULL;

-> right exclusive join
SELECT * FROM student AS a
RIGHT JOIN course AS B
ON a.id = b.id
WHERE a.id IS NULL;

-> full exclusive join
SELECT * FROM a
FULL OUTER JOIN b
ON a.key = b.key
WHERE a.key IS NULL OR b.key IS NULL;

-> self join
SELECT col
FROM table_name AS a
JOIN table_name AS b
ON a.key = b.key;


-> union removes duplicate values whereas union all keeps the duplicate values
SELECT name FROM emp
UNION
SELECT name from emp;

SELECT name FROM emp
UNION ALL
SELECT name from emp;

-> subqueries...use the operation like between or in 
-> find the employees whos salary is mor ethan the average salary
SELECT * FROM employee 
WHERE salary > (SELECT AVG(salary) FROM employee);

or

SELECT * FROM employee e
JOIN (SELECT AVG(salary) sal FROM employee) avg_sal
ON e.salary > avg_sal.sal;

-> scalar subquery will return one row and 1 column
-> multiple row subquery which returns ,ul col and mul rows or return 1 col and mul rows

-> find the emp who earn the highest salary in each dept

SELECT * FROM employee 
WHERE (dept_name, salary) IN (SELECT dept_name, max(salary) FROM employee
                             GROUP BY dept_name);

-> find dept who do not have any employees
SELECT * FROM department
WHERE dept_name NOT IN (SELECT DISTINCT(dept_name) FROM employee);

-> correlated subquery  


-> views
view is a virtual table based on the result-set of an SQL statement

CREATE VIEW view1 AS
SELECT roll, name FROM student;

SELECT * FROM view1;

single table
CREATE VIEW details AS
SELECT name,add
FROM students
WHERE id < 18;

multiple table
CREATE VIEW details AS
SELECT s.name,s.add,m.marks
FROM students s, marks m
WHERE s.id = m.id;

dropping view
DROP VIEW name;

###################
CASE(IF-ELSE)

SELECT N,
CASE
WHEN P IS NULL THEN 'Root'
WHEN N NOT IN (SELECT DISTINCT P FROM BST WHERE P IS NOT NULL) THEN 'Leaf'
ELSE 'Inner'
END
FROM BST
ORDER BY N;

#############################
CALCULATING MEDIAN

SELECT DISTINCT PERCENTILE_CONT(0.5) 
  WITHIN GROUP (ORDER BY list_price) OVER() AS "Median"
FROM sales.order_items

SELECT ROUND(AVG(LAT_N), 4) AS Median_Latitude
FROM (
    SELECT LAT_N
    FROM STATION
    ORDER BY LAT_N
    LIMIT 2 - (SELECT COUNT(*) FROM STATION) % 2, 1
) AS median_query;


tips
-> char aur varchar mein yeh diff hai ki char poora memory jitna bola hai utna retain kar dega ....lekin varchar joh hai woh utna hi memory lega jitni zarurat hai...
hence varchar is more memory efficient

-> BLOB datatype ka matlab hai binary large objects
-> Foreign Keys can have duplicate and null values
-> constraints = NULL, NOT NULL, UNIQUE, PRIMARY KEY, DEFAULT,AUTO_INCREMENT
-> modulus - MOD(col_name, number)....example - MOD(ID,2)=0...means even ID

-> Use WHERE instead of HAVING when filtering rows based on conditions related to columns (MARKS in this case). 
HAVING is used with aggregate functions (like SUM, COUNT, AVG) in GROUP BY queries.

-> Aggregate functions - SUM(),AVG(),DIFFERENCE().....yeh string ske liye hai, nos ke liye normal '-' sign
REPLACE(), ROUND(), CEIL(),FLOOR()

-> QUESTION
Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths 
(i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that
comes first when ordered alphabetically.

SELECT CITY, LENGTH(CITY)
FROM STATION
ORDER BY LENGTH(CITY) ASC, CITY ASC
LIMIT 1;

SELECT CITY, LENGTH(CITY)
FROM STATION
ORDER BY LENGTH(CITY) DESC, CITY ASC
LIMIT 1;

inplace of LIMIT 1 , one can also use FETCH FIRST ROW ONLY
pehle length se sort then alphabeticcaly sort isiliye order by ke baad ussi order mein mention karna imp


-> QUESTION
Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

SELECT DISTINCT CITY
FROM STATION
WHERE RIGHT(CITY,1) IN ('A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u');


right side se first character
aise hi left bhi rehta ... use it for extraction
